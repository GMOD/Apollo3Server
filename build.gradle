buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.0.10"
        classpath 'org.springframework:springloaded:1.2.8.RELEASE'
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.0.10"
        classpath 'org.springframework:springloaded:1.2.8.RELEASE'
    }
}

version "3.0.0-SNAPSHOT"
//group "apollo"
group "org.bbop.apollo"

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "war"
apply plugin: "org.grails.grails-web"
apply plugin: "asset-pipeline"
apply plugin: "org.grails.grails-gsp"
//apply plugin: 'java'
//apply plugin: 'groovy'

// In this section you declare where to find the dependencies of your project
repositories {
    mavenLocal()
//    jcenter()
    maven {
        url "https://repo.grails.org/grails/core"
    }
    // added
    maven {
         url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/'

    }
    maven { url "https://oss.jfrog.org/repo/" }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

//configurations.all { Configuration c ->
//    c.exclude(group:'org.grails',module:'grails-datastore-simple')
//}


// In this section you declare the dependencies for your production and test code
dependencies {
    // START added dependencies

    compileOnly "io.micronaut:micronaut-inject-groovy:2.4.2" // used to pull in micronaut libraries
    compileOnly "io.micronaut:micronaut-inject-java:2.4.2" // used to pull in micronaut libraries

    compileOnly "io.micronaut.configuration:micronaut-openapi:1.4.5"
    compile "io.swagger.core.v3:swagger-annotations:2.1.9"
    compileOnly "io.micronaut.configuration:micronaut-openapi:1.4.5"
    compile group: 'io.micronaut', name: 'http-client', version: '1.0.0.RC2'


    // HTSJDK
    compile group: 'com.github.samtools', name: 'htsjdk', version: '2.21.3'

    // svg generation
    compile group: 'org.apache.commons', name: 'commons-compress', version: '1.18'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile 'commons-codec:commons-codec:1.14'
    compile 'commons-collections:commons-collections:3.2.2'
    compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.2'


    compile 'org.grails.plugins:grails-spring-websocket:2.5.0.RC1'

    // shiro:
    compile 'org.grails.plugins:grails-shiro:3.3'

    // spring security:
//    compile 'org.grails.plugins:spring-security-core:4.0.0'
//    compile 'org.grails.plugins:spring-security-core:3.3.1'



    // END added dependencies

//    development "org.springframework.boot:spring-boot-devtools"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile ("org.grails.plugins:cache"){
        exclude group: 'org.codehaus.groovy'//, name: 'groovy-all'
    }
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:neo4j"
//    compile 'org.grails.plugins:neo4j:7.0.2'
    compile 'org.springframework.boot:spring-boot-starter-validation'
    compile "org.grails.plugins:gsp"
    compile 'org.grails.plugins:external-config:2.0.0' // or latest version
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.15.1"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails.plugins:geb"
    testCompile "org.grails:grails-web-testing-support"
    testCompile "org.grails:grails-test-mixins:3.3.0"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
    testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:2.47.1"
    runtime "org.neo4j.test:neo4j-harness:$neo4jVersion"
}

bootRun {
//    jvmArgs('-Dspring.output.ansi.enabled=always')
//    jvmArgs = ['-Dspring.output.ansi.enabled=always', '-Dgrails.reload.enabled=true', '-Ddisable.auto.recompile=false', "-Xms4048m", "-Xmx4048m"]
//    addResources = true
//    String springProfilesActive = 'spring.profiles.active'
//    systemProperty springProfilesActive, System.getProperty(springProfilesActive)

    ignoreExitValue true
    jvmArgs = ['-Dspring.output.ansi.enabled=always',
               '-noverify',
               '-Dgrails.reload.enabled=true',
               '-Ddisable.auto.recompile=false',
               "-Xms512m",
               "-Xmx4048m"]
//    jvmArgs(
//        '-Dspring.output.ansi.enabled=always',
//        '-noverify',
//        '-XX:TieredStopAtLevel=1',
//        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

grails {
    agent {
        enabled = true
    }
}

grails {
    pathingJar = true
    exploded = true
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}

//tasks.copyApolloYml(type: Copy){
//    from(userDir) {
//        include 'apollo.yml'
//        into ("$buildDir/classes/groovy")
//    }
//}

war {
    def userDir = System.getProperty("user.dir")
    String apolloFilePath = userDir + '/apollo.yml'
    File apolloFile = new File(apolloFilePath)
//    File targetFile = new File("${buildDir}/classes/groovy/apollo.yml")
    File targetFile = new File("src/main/webapp/WEB-INF/apollo.yml")
    if(apolloFile.exists()){
        println "custom property file exists ${apolloFile.absolutePath}"
        println "copying to target war to ${targetFile.absolutePath}"
        targetFile.write(apolloFile.text)
    }
    else{
        if(targetFile.exists()){
            println "no custom file exists ${apolloFile.absolutePath}"
            println "removing from target war ${targetFile.absolutePath}"
            targetFile.delete()
        }
    }
}

assets {
    minifyJs = true
    minifyCss = true
}

