sudo: true
dist: xenial

language: groovy

jdk:
  - openjdk8
#  - openjdk11

python:
  - "3.8.5"

before_install:
  - sudo apt-get -y install python3-venv
  - "pyenv global 3.7.1"
  - "pip install pip --upgrade"
  - python --version
  - python3 --version
  - pip install nose
  # Install Neo4j locally:
  - wget dist.neo4j.org/neo4j-community-$NEO4J_VERSION-unix.tar.gz
  - tar -xzf neo4j-community-$NEO4J_VERSION-unix.tar.gz
  - neo4j-community-$NEO4J_VERSION/bin/neo4j start
  # HACK need to change the password initially; changing it and then reverting:
  - echo "STARING UP Neo4J"
  - neo4j-community-$NEO4J_VERSION/bin/neo4j --version
  - sleep 35  # give Neo4J some time to start
  - echo "STARTED"
  - echo "Checking version"
  - ps -ef | grep neo4j
  - netstat -tan | grep LISTEN
  - echo "Setting password initially"
  - curl -v -X POST http://neo4j:neo4j@localhost:7474/user/neo4j/password -d"password=testpass"
  - echo "Setting password again to verify"
  - curl -v -X POST http://neo4j:neo4j@localhost:7474/user/neo4j/password -d"password=testpass"
  #  - curl -H "Content-Type: application/json" -X POST -d '{"password":"testpass"}' -u neo4j:neo4j http://localhost:7474/user/neo4j/password
  - echo "Password set"
#  - curl -v POST http://neo4j:neo4j2@localhost:7474/user/neo4j/password -d"password=neo4j"

env:
  #  - DB=postgres TEST_SUITE=apollo
  #  - DB=mysql TEST_SUITE=apollo
  - TEST_SUITE=apollo NEO4J_VERSION=3.5.21
  - TEST_SUITE=python-apollo NEO4J_VERSION=3.5.21
#
#python:
#  - "3.7"

addons:
  chrome: stable
  apt:
    update: true
#   postgresql: "9.3"

#install:
#  - true

services:
# - postgresql
#- mysql
#  - neo4j
#  - docker

before_script:
  - "echo $JAVA_OPTS"
  - "export JAVA_OPTS='-Xmx2048m'"
  - "echo $JAVA_OPTS"
#  - if [ ${DB} == "mysql" ]; then cp src/integration-test/groovy/resources/travis/mysql.travis apollo-config.groovy; mysql -u root -e 'SET GLOBAL interactive_timeout=28800;'; mysql -u root -e 'SET GLOBAL wait_timeout=28800;'; mysql -u root -e 'SET GLOBAL connect_timeout=28800;';  mysql -u root -e 'create database apollo'; fi;
#  - if [ ${DB} == "postgres" ]; then cp src/integration-test/groovy/resources/travis/postgres.travis apollo-config.groovy; psql -c 'create database apollo;' -U postgres; psql -c 'create database apollo_chado' -U postgres; gunzip -c scripts/chado-schema-with-ontologies.sql.gz | psql -U postgres -h localhost -d apollo_chado; fi;
#   - if [ ${DB} == "postgres" ]; then cp src/integration-test/groovy/resources/travis/postgres.travis apollo-config.groovy; psql -c 'create database apollo;' -U postgres;  fi;

before_cache:
  - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock


cache:
  directories:
    - extlib/
    - $HOME/.grails/
    - $HOME/.m2/
    - $HOME/.gradle/caches/
    - $HOME/.gradle/wrapper/

script: "./src/integration-test/groovy/resources/travis/run-travis.sh"

